import os

root = os.path.dirname(__file__)

will_gen = []

HEADER = '''// Code generated by singee-gen-pp. DO NOT EDIT.

package pp
'''

TMPL = '''

func %(colorTitle)sString(format string, a ...interface{}) String { 
    return colorString(%(color)s, format, a...) 
}

func %(colorTitle)sPrint(a ...interface{}) {
    _ = Stdout.Print(%(color)s, a...)
}

func %(colorTitle)sPrintf(format string, a ...interface{}) {
    _ = Stdout.printf(%(color)s, format, a...)
}

func %(colorTitle)sPrintln(a ...interface{}) {
    _ = Stdout.Println(%(color)s, a...)
}

func E%(colorTitle)sPrint(a ...interface{}) {
    _ = Stderr.Print(%(color)s, a...)
}

func E%(colorTitle)sPrintf(format string, a ...interface{}) {
    _ = Stderr.printf(%(color)s, format, a...)
}

func E%(colorTitle)sPrintln(a ...interface{}) {
    _ = Stderr.Println(%(color)s, a...)
}
'''


def title(s):
    if s.endswith("UNDERLINE"):
        return s[:-len("UNDERLINE")].title() + "Underline"
    else:
        return s.title()


if __name__ == '__main__':
    with open(os.path.join(root, "preset.go")) as f:
        for line in f:
            part = line.strip().split("=")[0].strip()
            if part.isupper():
                will_gen.append(part)

    buf = HEADER
    for color in will_gen:
        print("generate for", color)
        buf += TMPL % {"color": color, "colorTitle": title(color)}

    with open(os.path.join(root, "autogen.go"), "w") as f:
        f.write(buf)
